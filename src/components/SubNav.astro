---
import { getCollection } from "astro:content";

const pages = (await getCollection("learn")).map(({ data, id, collection }) =>
  Object.assign(data, {
    slug: `/${collection}/${id}`
  })
);

interface Chapter {
  title: string;
  number: number;
  pages: typeof pages;
}

const chapters = Object.values<Chapter>(
  pages.reduce(
    (hash, page) =>
      Object.assign(hash, {
        [page.chapter]: {
          title: page.chapter,
          number: page.chapterNumber,
          pages: [
            ...(Array.isArray(hash[page.chapter]?.pages)
              ? hash[page.chapter].pages
              : []),
            page
          ]
        }
      }),
    {} as Record<string, Chapter>
  )
).toSorted((a, b) => a.number - b.number);
---

<script>
  const activeLink = `a[href="${new URL(location.href).pathname}"]`;
  const chapter = document.querySelector(`.subnav details:has(${activeLink})`);
  const link = document.querySelector(`.subnav ${activeLink}`);

  if (chapter && chapter.tagName.toLowerCase() === "details") {
    (chapter as HTMLDetailsElement).open = true;
  }
  if (link) {
    link.classList.add("active");
  }
</script>

<style is:global>
  .subnav {
    grid-column: 1 / 2;
    grid-row: 2 / 3;
    display: flex;
    flex-direction: column;
    width: 320px;
    min-height: 100dvh;
    height: fit-content;
    padding: 2rem;
    box-sizing: border-box;

    details {
      --outline: transparent;
      --shadow: transparent;
      display: flex;
      flex-direction: column;
      width: 100%;

      & summary:focus-visible {
        --outline: var(--cp-500);
        --shadow: var(--cp-a200);
      }

      &[open] > summary:first-of-type::before {
        content: "-";
      }

      > summary:first-of-type {
        --text: var(--cn-950);
        position: relative;
        border-radius: 4px;
        border: 1px solid var(--outline);
        padding-block: 2px;
        padding-inline: 4px;
        color: var(--text);
        box-shadow: 0 0 0 1.5px var(--shadow);
        cursor: pointer;
        list-style-type: none;

        &:before {
          content: "+";
          position: absolute;
          top: 0.25em;
          right: 0.25em;
          display: flex;
          justify-content: center;
          align-items: center;
          width: 1em;
          height: 1em;
          line-height: 1em;
        }

        &:hover {
          --text: var(--cp-900);
        }

        &:focus-visible {
          outline: none;
        }
      }
    }

    nav {
      display: flex;
      flex-direction: column;
      width: 100%;
      padding-top: 24px;

      ul {
        display: flex;
        flex-direction: column;
        margin: 0;
        padding-left: 1ch;
        list-style: none;

        li {
          --outline: transparent;
          --shadow: transparent;
          --text: var(--cn-700);
          border-radius: 4px;
          border: 1px solid var(--outline);
          padding-block: 2px;
          padding-inline: 4px;
          text-wrap: balance;
          box-shadow: 0 0 0 1.5px var(--shadow);

          &:hover {
            --text: var(--cn-900);
          }

          &:has(a.active) {
            --text: var(--cp-700);
          }

          &:focus-within {
            --outline: var(--cp-500);
            --shadow: var(--cp-a200);
          }

          a {
            display: block;
            width: stretch;
            color: var(--text);
            text-decoration: none;

            &:focus-visible {
              outline: none;
            }
          }
        }
      }
    }
  }
</style>

<aside class="subnav">
  <nav>
    {
      chapters.map((chapter) => (
        <details name="chapter">
          <summary>{chapter.title}</summary>
          <ul>
            {chapter.pages
              .sort((a, b) => a.part - b.part)
              .map((page) => (
                <li>
                  <a href={page.slug}>{page.title}</a>
                </li>
              ))}
          </ul>
        </details>
      ))
    }
  </nav>
</aside>
