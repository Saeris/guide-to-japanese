---
import { getCollection } from "astro:content";

const pages = (await getCollection("learn")).map(({ data, slug, collection }) =>
  Object.assign(data, {
    slug: `/${collection}/${slug}`
  })
);

interface Chapter {
  title: string;
  number: number;
  pages: typeof pages;
}

const chapters = Object.values(
  pages.reduce(
    (hash, page) =>
      Object.assign(hash, {
        [page.chapter]: {
          title: page.chapter,
          number: page.chapterNumber,
          pages: [
            ...(Array.isArray(hash[page.chapter]?.pages)
              ? hash[page.chapter].pages
              : []),
            page
          ]
        }
      }),
    {} as Record<string, Chapter>
  )
).sort((a, b) => a.number - b.number);
---

<style>
  .subnav {
    display: grid;
    grid-auto-rows: min-content;
    align-items: start;
    padding: 3rem 2rem;

    @media screen and (min-width: 60rem) {
      grid-column: 1 / 2;
      grid-row: 2 / 3;
      grid-template-rows: 1fr min-content;
      height: fit-content;
      min-height: 100dvh;
      max-width: 300px;
      padding: 2rem;
    }

    nav {
      display: flex;
      flex-direction: column;
      grid-area: 1 / 1;

      h2 {
        font-size: var(--ht);
      }

      ul {
        display: flex;
        flex-direction: column;
        margin: 0;
        padding-left: 1ch;
        font: 500 var(--fs-body) / 1.3 var(--family-display);
        list-style: none;

        a {
          color: var(--color-text);
          text-decoration: none;
        }
      }
    }
  }
</style>

<aside class="subnav">
  <nav>
    {
      Object.values(chapters).map((chapter) => (
        <>
          <h2>{chapter.title}</h2>
          <ul>
            {chapter.pages
              .sort((a, b) => a.part - b.part)
              .map((page) => (
                <li>
                  <a href={page.slug}>{page.title}</a>
                </li>
              ))}
          </ul>
        </>
      ))
    }
  </nav>
</aside>
