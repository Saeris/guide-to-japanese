---
export type Theme = `light` | `dark` | `system`;

declare global {
  interface DocumentEventMap {
    [`set-theme`]: CustomEvent<Theme | null>;
  }
}

export interface Props {
  defaultTheme?: Theme;
}

const { defaultTheme = `system` } = Astro.props as Props;
---

<script type="module" define:vars={{ defaultTheme }}>
  const STORAGE_KEY = "theme";

  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)");

  const getThemePreference = () =>
    prefersDark.matches ? "dark" : defaultTheme;

  const resolveTheme = (setting) =>
    setting !== undefined
      ? setting
      : localStorage.getItem(STORAGE_KEY) ?? getThemePreference();

  const writeTheme = (theme) => {
    document.documentElement.setAttribute("data-theme", theme);
    if (theme === `dark`) {
      document.documentElement.classList.add(`dark`);
    } else {
      document.documentElement.classList.remove(`dark`);
    }
    if (theme === `system`) {
      document.documentElement.style.removeProperty(`color-scheme`);
    } else {
      document.documentElement.style.colorScheme = theme;
    }
  };

  const rewriteTheme = () => writeTheme(resolveTheme());

  document.addEventListener("set-theme", (event) => {
    if (event.detail) {
      localStorage.setItem(STORAGE_KEY, event.detail);
      writeTheme(event.detail);
    } else {
      localStorage.removeItem(STORAGE_KEY);
      writeTheme(resolveTheme(event.detail));
    }
  });
  window.addEventListener("storage", (event) => {
    if (event.key !== STORAGE_KEY) return;
    writeTheme(resolveTheme(event.newValue));
  });
  prefersDark.addEventListener("change", rewriteTheme);
  document.addEventListener("astro:after-swap", rewriteTheme);
  writeTheme(resolveTheme());
</script>
